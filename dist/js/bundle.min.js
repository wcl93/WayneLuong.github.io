!function(n){var e={};function t(r){if(e[r])return e[r].exports;var c=e[r]={i:r,l:!1,exports:{}};return n[r].call(c.exports,c,c.exports,t),c.l=!0,c.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var c in n)t.d(r,c,function(e){return n[e]}.bind(null,c));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=0)}([function(n,e,t){t(1),n.exports=t(2)},function(n,e){$(document).ready(function(){$("a").on("click",function(n){if(""!==this.hash){n.preventDefault();var e=this.hash;$("html, body").animate({scrollTop:$(e).offset().top},800,function(){window.location.hash=e})}})}),window.addEventListener("load",()=>{$("#status").fadeOut(),$("#loadercontainer").fadeOut(),$("#preloader").delay(300).fadeOut()});const t=document.querySelector("#menubtn"),r=document.querySelector(".menu"),c=(document.querySelector(".menu-nav"),document.querySelector(".menu-Item1")),o=document.querySelector(".menu-Item2"),l=document.querySelector(".menu-Item3"),i=document.querySelector(".menu-Item4");let a=!1;$(t).on("click",()=>{a?a&&(t.classList.remove("close"),r.classList.remove("show"),a=!1):(t.classList.add("close"),r.classList.add("show"),a=!0)}),$(c).on("click",()=>{$(c).addClass("active"),$(o).removeClass("active"),$(l).removeClass("active"),$(i).removeClass("active")}),$(o).on("click",()=>{$(c).removeClass("active"),$(o).addClass("active"),$(l).removeClass("active"),$(i).removeClass("active")}),$(l).on("click",()=>{$(c).removeClass("active"),$(o).removeClass("active"),$(l).addClass("active"),$(i).removeClass("active")}),$(i).on("click",()=>{$(c).removeClass("active"),$(o).removeClass("active"),$(l).removeClass("active"),$(i).addClass("active")}),window.sr=ScrollReveal(),sr.reveal("#home h1",{duration:2e3,origin:"top"}),sr.reveal("#home h2",{duration:2e3,origin:"top"}),sr.reveal("#home h3",{duration:4e3,origin:"left",delay:1e3}),sr.reveal("#home a",{duration:4e3,origin:"left",delay:1500}),sr.reveal("#about h1",{duration:1e3,origin:"right",viewFactor:.2}),sr.reveal("#about h2",{duration:2500,origin:"right",viewFactor:.2}),sr.reveal("#about p",{duration:1500,origin:"right",delay:500,viewFactor:.2}),sr.reveal("#container",{duration:1500,origin:"right",delay:1e3,viewFactor:.2}),sr.reveal("#container2",{duration:1500,origin:"right",delay:1e3,viewFactor:.2}),sr.reveal("#banner h2",{duration:2500,origin:"right",viewFactor:.2}),sr.reveal("#portfolio h1",{duration:2e3,origin:"right",viewFactor:.2}),sr.reveal("#portfolio nav",{duration:2e3,delay:1e3,origin:"right",viewFactor:.2})},function(module,exports){!function(n){var e={};function t(r){if(e[r])return e[r].exports;var c=e[r]={i:r,l:!1,exports:{}};return n[r].call(c.exports,c,c.exports,t),c.l=!0,c.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var c in n)t.d(r,c,function(e){return n[e]}.bind(null,c));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=0)}({"./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/*! no static exports found */function(module,exports){eval("/* require('navmenu.js'); */\r\n\r\n/* -----------Smooth scroll -------------*/\r\n$(document).ready(function () {\r\n    // Add smooth scrolling to all links\r\n    $(\"a\").on('click', function (event) {\r\n\r\n        // Make sure this.hash has a value before overriding default behavior\r\n        if (this.hash !== \"\") {\r\n            // Prevent default anchor click behavior\r\n            event.preventDefault();\r\n\r\n            // Store hash\r\n            var hash = this.hash;\r\n\r\n            // Using jQuery's animate() method to add smooth page scroll\r\n            // The optional number (800) specifies the number of milliseconds it takes to scroll to the specified area\r\n            $('html, body').animate({\r\n                scrollTop: $(hash).offset().top\r\n            }, 800, function () {\r\n\r\n                // Add hash (#) to URL when done scrolling (default click behavior)\r\n                window.location.hash = hash;\r\n            });\r\n        } // End if\r\n    });\r\n});\r\n\r\n/* ----------------------preloader---------------------------- */\r\nwindow.addEventListener('load', () => {\r\n    $('#status').fadeOut()\r\n    $('#loadercontainer').fadeOut();\r\n    $('#preloader').delay(300).fadeOut();\r\n});\r\n\r\n\r\n/*----------------------------- Menu button---------------------- */\r\nconst menuBtn = document.querySelector('#menubtn');\r\n\r\nconst menu = document.querySelector('.menu');\r\nconst menuNav = document.querySelector('.menu-nav');\r\nconst menuItem1 = document.querySelector('.menu-Item1');\r\nconst menuItem2 = document.querySelector('.menu-Item2');\r\nconst menuItem3 = document.querySelector('.menu-Item3');\r\nconst menuItem4 = document.querySelector('.menu-Item4');\r\n/* const navItems = document.querySelectorAll('.menu-Item'); */\r\n\r\nlet showMenu = false;\r\n\r\n$(menuBtn).on('click', () => {\r\n    if (!showMenu) {\r\n        menuBtn.classList.add('close');\r\n        menu.classList.add('show');\r\n        /* menuItem.classList.add('show'); */\r\n        /* navItems.classList.add('show'); */\r\n\r\n        showMenu = true;\r\n    } else if (showMenu) {\r\n        menuBtn.classList.remove('close');\r\n        menu.classList.remove('show');\r\n        /* menuItem.classList.remove('show'); */\r\n        /* navItems.classList.remove('show'); */\r\n\r\n        showMenu = false;\r\n    }\r\n});\r\n\r\n/* -------------------------------Menu Items -----------------------*/\r\n$(menuItem1).on('click', () => {\r\n    $(menuItem1).addClass('active');\r\n    $(menuItem2).removeClass('active');\r\n    $(menuItem3).removeClass('active');\r\n    $(menuItem4).removeClass('active');\r\n});\r\n$(menuItem2).on('click', () => {\r\n    $(menuItem1).removeClass('active');\r\n    $(menuItem2).addClass('active');\r\n    $(menuItem3).removeClass('active');\r\n    $(menuItem4).removeClass('active');\r\n});\r\n$(menuItem3).on('click', () => {\r\n    $(menuItem1).removeClass('active');\r\n    $(menuItem2).removeClass('active');\r\n    $(menuItem3).addClass('active');\r\n    $(menuItem4).removeClass('active');\r\n});\r\n$(menuItem4).on('click', () => {\r\n    $(menuItem1).removeClass('active');\r\n    $(menuItem2).removeClass('active');\r\n    $(menuItem3).removeClass('active');\r\n    $(menuItem4).addClass('active');\r\n});\r\n\r\n/* $('a').on('click', function(e){\r\n    e.preventDefault()\r\n    alert('clik');\r\n}) */\r\n\r\n/* Scroll Reveal */\r\n\r\nwindow.sr = ScrollReveal();\r\nsr.reveal('#home h1', {\r\n    duration: 2000,\r\n    origin: 'top'\r\n});\r\nsr.reveal('#home h2', {\r\n    duration: 2000,\r\n    origin: 'top'\r\n});\r\nsr.reveal('#home h3', {\r\n    duration: 4000,\r\n    origin: 'left',\r\n    delay: 1000\r\n});\r\nsr.reveal('#home a', {\r\n    duration: 4000,\r\n    origin: 'left',\r\n    delay: 1500,\r\n});\r\nsr.reveal('#about h1', {\r\n    duration: 1000,\r\n    origin: 'right',\r\n    viewFactor: 0.2\r\n});\r\nsr.reveal('#about h2', {\r\n    duration: 2500,\r\n    origin: 'right',\r\n    viewFactor: 0.2\r\n});\r\nsr.reveal('#about p', {\r\n    duration: 1500,\r\n    origin: 'right',\r\n    delay: 500,\r\n    viewFactor: 0.2\r\n});\r\nsr.reveal('#container', {\r\n    duration: 1500,\r\n    origin: 'right',\r\n    delay: 1000,\r\n    viewFactor: 0.2\r\n});\r\nsr.reveal('#container2', {\r\n    duration: 1500,\r\n    origin: 'right',\r\n    delay: 1000,\r\n    viewFactor: 0.2\r\n});\r\nsr.reveal('#banner h2', {\r\n    duration: 2500,\r\n    origin: 'right',\r\n    viewFactor: 0.2\r\n});\r\nsr.reveal('#portfolio h1', {\r\n    duration: 2000,\r\n    origin: 'right',\r\n    viewFactor: 0.2\r\n});\r\nsr.reveal('#portfolio nav', {\r\n    duration: 2000,\r\n    delay:1000,\r\n    origin: 'right',\r\n    viewFactor: 0.2\r\n});\r\n/* sr.reveal('#contact h1', {\r\n    duration: 2000,\r\n    origin: 'right',\r\n    viewFactor: 0.2\r\n});\r\nsr.reveal('#contact h2', {\r\n    duration: 2000,\r\n    origin: 'right',\r\n    viewFactor: 0.2\r\n});\r\nsr.reveal('#contact a', {\r\n    duration: 2000,\r\n    delay:500,\r\n    origin: 'right',\r\n    viewFactor: 0.2\r\n}); */\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/main.js\n")},0:
/*!***************************************************!*\
  !*** multi ./src/js/main.js ./dist/bundle.min.js ***!
  \***************************************************/
/*! no static exports found */function(n,e,t){t(/*! /Users/wayne/Desktop/GitHub/WayneLuong.github.io/src/js/main.js */"./src/js/main.js"),function(){var n=new Error("Cannot find module './dist/bundle.min.js'");throw n.code="MODULE_NOT_FOUND",n}()}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vZGlzdC9qcy9idW5kbGUubWluLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiJCIsImRvY3VtZW50IiwicmVhZHkiLCJvbiIsImV2ZW50IiwidGhpcyIsImhhc2giLCJwcmV2ZW50RGVmYXVsdCIsImFuaW1hdGUiLCJzY3JvbGxUb3AiLCJvZmZzZXQiLCJ0b3AiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJmYWRlT3V0IiwiZGVsYXkiLCJtZW51QnRuIiwicXVlcnlTZWxlY3RvciIsIm1lbnUiLCJtZW51SXRlbTEiLCJtZW51SXRlbTIiLCJtZW51SXRlbTMiLCJtZW51SXRlbTQiLCJzaG93TWVudSIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJzciIsIlNjcm9sbFJldmVhbCIsInJldmVhbCIsImR1cmF0aW9uIiwib3JpZ2luIiwidmlld0ZhY3RvciIsIi4vc3JjL2pzL21haW4uanMiLCJldmFsIiwiMCIsImUiLCJFcnJvciIsImNvZGUiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FB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QUFBTixFQUFBTSxJQUFxQkMsS0FBQSxLQUFBRCxJQUM3SSxPQUFBRixHQUlBekIsRUFBQTZCLEVBQUEsU0FBQTFCLEdBQ0EsSUFBQVMsRUFBQVQsS0FBQXFCLFdBQ0EsV0FBbUMsT0FBQXJCLEVBQUEsU0FDbkMsV0FBeUMsT0FBQUEsR0FFekMsT0FEQUgsRUFBQVUsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBWixFQUFBYSxFQUFBLFNBQUFpQixFQUFBQyxHQUE4RCxPQUFBakIsT0FBQWtCLFVBQUFDLGVBQUExQixLQUFBdUIsRUFBQUMsSUFHOUQvQixFQUFBa0MsRUFBQSxHQUlBbEMsSUFBQW1DLEVBQUEsR0FuRkEsRUF3RkFxQzs7Ozs4QkFLQSxTQUFBckUsT0FBQUQsU0FFQXVFLEtBQUEsK25hQUlBQzs7Ozs4QkFLQSxTQUFBdkUsRUFBQUQsRUFBQUYsR0FFQUEsd0VBQUEsb0JBQ0EsV0FBbUMsSUFBQTJFLEVBQUEsSUFBQUMsTUFBQSw2Q0FBNkYsTUFBN0JELEVBQUFFLEtBQUEsbUJBQTZCRixFQUFoSSIsImZpbGUiOiJidW5kbGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiLyogcmVxdWlyZSgnbmF2bWVudS5qcycpOyAqL1xyXG5cclxuLyogLS0tLS0tLS0tLS1TbW9vdGggc2Nyb2xsIC0tLS0tLS0tLS0tLS0qL1xyXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBBZGQgc21vb3RoIHNjcm9sbGluZyB0byBhbGwgbGlua3NcclxuICAgICQoXCJhXCIpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xyXG5cclxuICAgICAgICAvLyBNYWtlIHN1cmUgdGhpcy5oYXNoIGhhcyBhIHZhbHVlIGJlZm9yZSBvdmVycmlkaW5nIGRlZmF1bHQgYmVoYXZpb3JcclxuICAgICAgICBpZiAodGhpcy5oYXNoICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIC8vIFByZXZlbnQgZGVmYXVsdCBhbmNob3IgY2xpY2sgYmVoYXZpb3JcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFN0b3JlIGhhc2hcclxuICAgICAgICAgICAgdmFyIGhhc2ggPSB0aGlzLmhhc2g7XHJcblxyXG4gICAgICAgICAgICAvLyBVc2luZyBqUXVlcnkncyBhbmltYXRlKCkgbWV0aG9kIHRvIGFkZCBzbW9vdGggcGFnZSBzY3JvbGxcclxuICAgICAgICAgICAgLy8gVGhlIG9wdGlvbmFsIG51bWJlciAoODAwKSBzcGVjaWZpZXMgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdGFrZXMgdG8gc2Nyb2xsIHRvIHRoZSBzcGVjaWZpZWQgYXJlYVxyXG4gICAgICAgICAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICBzY3JvbGxUb3A6ICQoaGFzaCkub2Zmc2V0KCkudG9wXHJcbiAgICAgICAgICAgIH0sIDgwMCwgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEFkZCBoYXNoICgjKSB0byBVUkwgd2hlbiBkb25lIHNjcm9sbGluZyAoZGVmYXVsdCBjbGljayBiZWhhdmlvcilcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaGFzaDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSAvLyBFbmQgaWZcclxuICAgIH0pO1xyXG59KTtcclxuXHJcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1wcmVsb2FkZXItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xyXG4gICAgJCgnI3N0YXR1cycpLmZhZGVPdXQoKVxyXG4gICAgJCgnI2xvYWRlcmNvbnRhaW5lcicpLmZhZGVPdXQoKTtcclxuICAgICQoJyNwcmVsb2FkZXInKS5kZWxheSgzMDApLmZhZGVPdXQoKTtcclxufSk7XHJcblxyXG5cclxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBNZW51IGJ1dHRvbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuY29uc3QgbWVudUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtZW51YnRuJyk7XHJcblxyXG5jb25zdCBtZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1lbnUnKTtcclxuY29uc3QgbWVudU5hdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZW51LW5hdicpO1xyXG5jb25zdCBtZW51SXRlbTEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudS1JdGVtMScpO1xyXG5jb25zdCBtZW51SXRlbTIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudS1JdGVtMicpO1xyXG5jb25zdCBtZW51SXRlbTMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudS1JdGVtMycpO1xyXG5jb25zdCBtZW51SXRlbTQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudS1JdGVtNCcpO1xyXG4vKiBjb25zdCBuYXZJdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZW51LUl0ZW0nKTsgKi9cclxuXHJcbmxldCBzaG93TWVudSA9IGZhbHNlO1xyXG5cclxuJChtZW51QnRuKS5vbignY2xpY2snLCAoKSA9PiB7XHJcbiAgICBpZiAoIXNob3dNZW51KSB7XHJcbiAgICAgICAgbWVudUJ0bi5jbGFzc0xpc3QuYWRkKCdjbG9zZScpO1xyXG4gICAgICAgIG1lbnUuY2xhc3NMaXN0LmFkZCgnc2hvdycpO1xyXG4gICAgICAgIC8qIG1lbnVJdGVtLmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTsgKi9cclxuICAgICAgICAvKiBuYXZJdGVtcy5jbGFzc0xpc3QuYWRkKCdzaG93Jyk7ICovXHJcblxyXG4gICAgICAgIHNob3dNZW51ID0gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZiAoc2hvd01lbnUpIHtcclxuICAgICAgICBtZW51QnRuLmNsYXNzTGlzdC5yZW1vdmUoJ2Nsb3NlJyk7XHJcbiAgICAgICAgbWVudS5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7XHJcbiAgICAgICAgLyogbWVudUl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpOyAqL1xyXG4gICAgICAgIC8qIG5hdkl0ZW1zLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKTsgKi9cclxuXHJcbiAgICAgICAgc2hvd01lbnUgPSBmYWxzZTtcclxuICAgIH1cclxufSk7XHJcblxyXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tTWVudSBJdGVtcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiQobWVudUl0ZW0xKS5vbignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAkKG1lbnVJdGVtMSkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgJChtZW51SXRlbTIpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICQobWVudUl0ZW0zKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAkKG1lbnVJdGVtNCkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG59KTtcclxuJChtZW51SXRlbTIpLm9uKCdjbGljaycsICgpID0+IHtcclxuICAgICQobWVudUl0ZW0xKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAkKG1lbnVJdGVtMikuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgJChtZW51SXRlbTMpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICQobWVudUl0ZW00KS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbn0pO1xyXG4kKG1lbnVJdGVtMykub24oJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgJChtZW51SXRlbTEpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICQobWVudUl0ZW0yKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAkKG1lbnVJdGVtMykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgJChtZW51SXRlbTQpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxufSk7XHJcbiQobWVudUl0ZW00KS5vbignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAkKG1lbnVJdGVtMSkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgJChtZW51SXRlbTIpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICQobWVudUl0ZW0zKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAkKG1lbnVJdGVtNCkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG59KTtcclxuXHJcbi8qICQoJ2EnKS5vbignY2xpY2snLCBmdW5jdGlvbihlKXtcclxuICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gICAgYWxlcnQoJ2NsaWsnKTtcclxufSkgKi9cclxuXHJcbi8qIFNjcm9sbCBSZXZlYWwgKi9cclxuXHJcbndpbmRvdy5zciA9IFNjcm9sbFJldmVhbCgpO1xyXG5zci5yZXZlYWwoJyNob21lIGgxJywge1xyXG4gICAgZHVyYXRpb246IDIwMDAsXHJcbiAgICBvcmlnaW46ICd0b3AnXHJcbn0pO1xyXG5zci5yZXZlYWwoJyNob21lIGgyJywge1xyXG4gICAgZHVyYXRpb246IDIwMDAsXHJcbiAgICBvcmlnaW46ICd0b3AnXHJcbn0pO1xyXG5zci5yZXZlYWwoJyNob21lIGgzJywge1xyXG4gICAgZHVyYXRpb246IDQwMDAsXHJcbiAgICBvcmlnaW46ICdsZWZ0JyxcclxuICAgIGRlbGF5OiAxMDAwXHJcbn0pO1xyXG5zci5yZXZlYWwoJyNob21lIGEnLCB7XHJcbiAgICBkdXJhdGlvbjogNDAwMCxcclxuICAgIG9yaWdpbjogJ2xlZnQnLFxyXG4gICAgZGVsYXk6IDE1MDAsXHJcbn0pO1xyXG5zci5yZXZlYWwoJyNhYm91dCBoMScsIHtcclxuICAgIGR1cmF0aW9uOiAxMDAwLFxyXG4gICAgb3JpZ2luOiAncmlnaHQnLFxyXG4gICAgdmlld0ZhY3RvcjogMC4yXHJcbn0pO1xyXG5zci5yZXZlYWwoJyNhYm91dCBoMicsIHtcclxuICAgIGR1cmF0aW9uOiAyNTAwLFxyXG4gICAgb3JpZ2luOiAncmlnaHQnLFxyXG4gICAgdmlld0ZhY3RvcjogMC4yXHJcbn0pO1xyXG5zci5yZXZlYWwoJyNhYm91dCBwJywge1xyXG4gICAgZHVyYXRpb246IDE1MDAsXHJcbiAgICBvcmlnaW46ICdyaWdodCcsXHJcbiAgICBkZWxheTogNTAwLFxyXG4gICAgdmlld0ZhY3RvcjogMC4yXHJcbn0pO1xyXG5zci5yZXZlYWwoJyNjb250YWluZXInLCB7XHJcbiAgICBkdXJhdGlvbjogMTUwMCxcclxuICAgIG9yaWdpbjogJ3JpZ2h0JyxcclxuICAgIGRlbGF5OiAxMDAwLFxyXG4gICAgdmlld0ZhY3RvcjogMC4yXHJcbn0pO1xyXG5zci5yZXZlYWwoJyNjb250YWluZXIyJywge1xyXG4gICAgZHVyYXRpb246IDE1MDAsXHJcbiAgICBvcmlnaW46ICdyaWdodCcsXHJcbiAgICBkZWxheTogMTAwMCxcclxuICAgIHZpZXdGYWN0b3I6IDAuMlxyXG59KTtcclxuc3IucmV2ZWFsKCcjYmFubmVyIGgyJywge1xyXG4gICAgZHVyYXRpb246IDI1MDAsXHJcbiAgICBvcmlnaW46ICdyaWdodCcsXHJcbiAgICB2aWV3RmFjdG9yOiAwLjJcclxufSk7XHJcbnNyLnJldmVhbCgnI3BvcnRmb2xpbyBoMScsIHtcclxuICAgIGR1cmF0aW9uOiAyMDAwLFxyXG4gICAgb3JpZ2luOiAncmlnaHQnLFxyXG4gICAgdmlld0ZhY3RvcjogMC4yXHJcbn0pO1xyXG5zci5yZXZlYWwoJyNwb3J0Zm9saW8gbmF2Jywge1xyXG4gICAgZHVyYXRpb246IDIwMDAsXHJcbiAgICBkZWxheToxMDAwLFxyXG4gICAgb3JpZ2luOiAncmlnaHQnLFxyXG4gICAgdmlld0ZhY3RvcjogMC4yXHJcbn0pO1xyXG4vKiBzci5yZXZlYWwoJyNjb250YWN0IGgxJywge1xyXG4gICAgZHVyYXRpb246IDIwMDAsXHJcbiAgICBvcmlnaW46ICdyaWdodCcsXHJcbiAgICB2aWV3RmFjdG9yOiAwLjJcclxufSk7XHJcbnNyLnJldmVhbCgnI2NvbnRhY3QgaDInLCB7XHJcbiAgICBkdXJhdGlvbjogMjAwMCxcclxuICAgIG9yaWdpbjogJ3JpZ2h0JyxcclxuICAgIHZpZXdGYWN0b3I6IDAuMlxyXG59KTtcclxuc3IucmV2ZWFsKCcjY29udGFjdCBhJywge1xyXG4gICAgZHVyYXRpb246IDIwMDAsXHJcbiAgICBkZWxheTo1MDAsXHJcbiAgICBvcmlnaW46ICdyaWdodCcsXHJcbiAgICB2aWV3RmFjdG9yOiAwLjJcclxufSk7ICovXHJcbiIsIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4vKioqKioqLyBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vKioqKioqLyBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbi8qKioqKiovIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbi8qKioqKiovIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuLyoqKioqKi8gXHRcdHJldHVybiBucztcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIFwiLi9zcmMvanMvbWFpbi5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2pzL21haW4uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5ldmFsKFwiLyogcmVxdWlyZSgnbmF2bWVudS5qcycpOyAqL1xcclxcblxcclxcbi8qIC0tLS0tLS0tLS0tU21vb3RoIHNjcm9sbCAtLS0tLS0tLS0tLS0tKi9cXHJcXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XFxyXFxuICAgIC8vIEFkZCBzbW9vdGggc2Nyb2xsaW5nIHRvIGFsbCBsaW5rc1xcclxcbiAgICAkKFxcXCJhXFxcIikub24oJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XFxyXFxuXFxyXFxuICAgICAgICAvLyBNYWtlIHN1cmUgdGhpcy5oYXNoIGhhcyBhIHZhbHVlIGJlZm9yZSBvdmVycmlkaW5nIGRlZmF1bHQgYmVoYXZpb3JcXHJcXG4gICAgICAgIGlmICh0aGlzLmhhc2ggIT09IFxcXCJcXFwiKSB7XFxyXFxuICAgICAgICAgICAgLy8gUHJldmVudCBkZWZhdWx0IGFuY2hvciBjbGljayBiZWhhdmlvclxcclxcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XFxyXFxuXFxyXFxuICAgICAgICAgICAgLy8gU3RvcmUgaGFzaFxcclxcbiAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5oYXNoO1xcclxcblxcclxcbiAgICAgICAgICAgIC8vIFVzaW5nIGpRdWVyeSdzIGFuaW1hdGUoKSBtZXRob2QgdG8gYWRkIHNtb290aCBwYWdlIHNjcm9sbFxcclxcbiAgICAgICAgICAgIC8vIFRoZSBvcHRpb25hbCBudW1iZXIgKDgwMCkgc3BlY2lmaWVzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRha2VzIHRvIHNjcm9sbCB0byB0aGUgc3BlY2lmaWVkIGFyZWFcXHJcXG4gICAgICAgICAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7XFxyXFxuICAgICAgICAgICAgICAgIHNjcm9sbFRvcDogJChoYXNoKS5vZmZzZXQoKS50b3BcXHJcXG4gICAgICAgICAgICB9LCA4MDAsIGZ1bmN0aW9uICgpIHtcXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgLy8gQWRkIGhhc2ggKCMpIHRvIFVSTCB3aGVuIGRvbmUgc2Nyb2xsaW5nIChkZWZhdWx0IGNsaWNrIGJlaGF2aW9yKVxcclxcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGhhc2g7XFxyXFxuICAgICAgICAgICAgfSk7XFxyXFxuICAgICAgICB9IC8vIEVuZCBpZlxcclxcbiAgICB9KTtcXHJcXG59KTtcXHJcXG5cXHJcXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tcHJlbG9hZGVyLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xcclxcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xcclxcbiAgICAkKCcjc3RhdHVzJykuZmFkZU91dCgpXFxyXFxuICAgICQoJyNsb2FkZXJjb250YWluZXInKS5mYWRlT3V0KCk7XFxyXFxuICAgICQoJyNwcmVsb2FkZXInKS5kZWxheSgzMDApLmZhZGVPdXQoKTtcXHJcXG59KTtcXHJcXG5cXHJcXG5cXHJcXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE1lbnUgYnV0dG9uLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xcclxcbmNvbnN0IG1lbnVCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWVudWJ0bicpO1xcclxcblxcclxcbmNvbnN0IG1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudScpO1xcclxcbmNvbnN0IG1lbnVOYXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudS1uYXYnKTtcXHJcXG5jb25zdCBtZW51SXRlbTEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudS1JdGVtMScpO1xcclxcbmNvbnN0IG1lbnVJdGVtMiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZW51LUl0ZW0yJyk7XFxyXFxuY29uc3QgbWVudUl0ZW0zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1lbnUtSXRlbTMnKTtcXHJcXG5jb25zdCBtZW51SXRlbTQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudS1JdGVtNCcpO1xcclxcbi8qIGNvbnN0IG5hdkl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1lbnUtSXRlbScpOyAqL1xcclxcblxcclxcbmxldCBzaG93TWVudSA9IGZhbHNlO1xcclxcblxcclxcbiQobWVudUJ0bikub24oJ2NsaWNrJywgKCkgPT4ge1xcclxcbiAgICBpZiAoIXNob3dNZW51KSB7XFxyXFxuICAgICAgICBtZW51QnRuLmNsYXNzTGlzdC5hZGQoJ2Nsb3NlJyk7XFxyXFxuICAgICAgICBtZW51LmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTtcXHJcXG4gICAgICAgIC8qIG1lbnVJdGVtLmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTsgKi9cXHJcXG4gICAgICAgIC8qIG5hdkl0ZW1zLmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTsgKi9cXHJcXG5cXHJcXG4gICAgICAgIHNob3dNZW51ID0gdHJ1ZTtcXHJcXG4gICAgfSBlbHNlIGlmIChzaG93TWVudSkge1xcclxcbiAgICAgICAgbWVudUJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdjbG9zZScpO1xcclxcbiAgICAgICAgbWVudS5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7XFxyXFxuICAgICAgICAvKiBtZW51SXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7ICovXFxyXFxuICAgICAgICAvKiBuYXZJdGVtcy5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7ICovXFxyXFxuXFxyXFxuICAgICAgICBzaG93TWVudSA9IGZhbHNlO1xcclxcbiAgICB9XFxyXFxufSk7XFxyXFxuXFxyXFxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLU1lbnUgSXRlbXMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xcclxcbiQobWVudUl0ZW0xKS5vbignY2xpY2snLCAoKSA9PiB7XFxyXFxuICAgICQobWVudUl0ZW0xKS5hZGRDbGFzcygnYWN0aXZlJyk7XFxyXFxuICAgICQobWVudUl0ZW0yKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XFxyXFxuICAgICQobWVudUl0ZW0zKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XFxyXFxuICAgICQobWVudUl0ZW00KS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XFxyXFxufSk7XFxyXFxuJChtZW51SXRlbTIpLm9uKCdjbGljaycsICgpID0+IHtcXHJcXG4gICAgJChtZW51SXRlbTEpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcXHJcXG4gICAgJChtZW51SXRlbTIpLmFkZENsYXNzKCdhY3RpdmUnKTtcXHJcXG4gICAgJChtZW51SXRlbTMpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcXHJcXG4gICAgJChtZW51SXRlbTQpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcXHJcXG59KTtcXHJcXG4kKG1lbnVJdGVtMykub24oJ2NsaWNrJywgKCkgPT4ge1xcclxcbiAgICAkKG1lbnVJdGVtMSkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xcclxcbiAgICAkKG1lbnVJdGVtMikucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xcclxcbiAgICAkKG1lbnVJdGVtMykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xcclxcbiAgICAkKG1lbnVJdGVtNCkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xcclxcbn0pO1xcclxcbiQobWVudUl0ZW00KS5vbignY2xpY2snLCAoKSA9PiB7XFxyXFxuICAgICQobWVudUl0ZW0xKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XFxyXFxuICAgICQobWVudUl0ZW0yKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XFxyXFxuICAgICQobWVudUl0ZW0zKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XFxyXFxuICAgICQobWVudUl0ZW00KS5hZGRDbGFzcygnYWN0aXZlJyk7XFxyXFxufSk7XFxyXFxuXFxyXFxuLyogJCgnYScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpe1xcclxcbiAgICBlLnByZXZlbnREZWZhdWx0KClcXHJcXG4gICAgYWxlcnQoJ2NsaWsnKTtcXHJcXG59KSAqL1xcclxcblxcclxcbi8qIFNjcm9sbCBSZXZlYWwgKi9cXHJcXG5cXHJcXG53aW5kb3cuc3IgPSBTY3JvbGxSZXZlYWwoKTtcXHJcXG5zci5yZXZlYWwoJyNob21lIGgxJywge1xcclxcbiAgICBkdXJhdGlvbjogMjAwMCxcXHJcXG4gICAgb3JpZ2luOiAndG9wJ1xcclxcbn0pO1xcclxcbnNyLnJldmVhbCgnI2hvbWUgaDInLCB7XFxyXFxuICAgIGR1cmF0aW9uOiAyMDAwLFxcclxcbiAgICBvcmlnaW46ICd0b3AnXFxyXFxufSk7XFxyXFxuc3IucmV2ZWFsKCcjaG9tZSBoMycsIHtcXHJcXG4gICAgZHVyYXRpb246IDQwMDAsXFxyXFxuICAgIG9yaWdpbjogJ2xlZnQnLFxcclxcbiAgICBkZWxheTogMTAwMFxcclxcbn0pO1xcclxcbnNyLnJldmVhbCgnI2hvbWUgYScsIHtcXHJcXG4gICAgZHVyYXRpb246IDQwMDAsXFxyXFxuICAgIG9yaWdpbjogJ2xlZnQnLFxcclxcbiAgICBkZWxheTogMTUwMCxcXHJcXG59KTtcXHJcXG5zci5yZXZlYWwoJyNhYm91dCBoMScsIHtcXHJcXG4gICAgZHVyYXRpb246IDEwMDAsXFxyXFxuICAgIG9yaWdpbjogJ3JpZ2h0JyxcXHJcXG4gICAgdmlld0ZhY3RvcjogMC4yXFxyXFxufSk7XFxyXFxuc3IucmV2ZWFsKCcjYWJvdXQgaDInLCB7XFxyXFxuICAgIGR1cmF0aW9uOiAyNTAwLFxcclxcbiAgICBvcmlnaW46ICdyaWdodCcsXFxyXFxuICAgIHZpZXdGYWN0b3I6IDAuMlxcclxcbn0pO1xcclxcbnNyLnJldmVhbCgnI2Fib3V0IHAnLCB7XFxyXFxuICAgIGR1cmF0aW9uOiAxNTAwLFxcclxcbiAgICBvcmlnaW46ICdyaWdodCcsXFxyXFxuICAgIGRlbGF5OiA1MDAsXFxyXFxuICAgIHZpZXdGYWN0b3I6IDAuMlxcclxcbn0pO1xcclxcbnNyLnJldmVhbCgnI2NvbnRhaW5lcicsIHtcXHJcXG4gICAgZHVyYXRpb246IDE1MDAsXFxyXFxuICAgIG9yaWdpbjogJ3JpZ2h0JyxcXHJcXG4gICAgZGVsYXk6IDEwMDAsXFxyXFxuICAgIHZpZXdGYWN0b3I6IDAuMlxcclxcbn0pO1xcclxcbnNyLnJldmVhbCgnI2NvbnRhaW5lcjInLCB7XFxyXFxuICAgIGR1cmF0aW9uOiAxNTAwLFxcclxcbiAgICBvcmlnaW46ICdyaWdodCcsXFxyXFxuICAgIGRlbGF5OiAxMDAwLFxcclxcbiAgICB2aWV3RmFjdG9yOiAwLjJcXHJcXG59KTtcXHJcXG5zci5yZXZlYWwoJyNiYW5uZXIgaDInLCB7XFxyXFxuICAgIGR1cmF0aW9uOiAyNTAwLFxcclxcbiAgICBvcmlnaW46ICdyaWdodCcsXFxyXFxuICAgIHZpZXdGYWN0b3I6IDAuMlxcclxcbn0pO1xcclxcbnNyLnJldmVhbCgnI3BvcnRmb2xpbyBoMScsIHtcXHJcXG4gICAgZHVyYXRpb246IDIwMDAsXFxyXFxuICAgIG9yaWdpbjogJ3JpZ2h0JyxcXHJcXG4gICAgdmlld0ZhY3RvcjogMC4yXFxyXFxufSk7XFxyXFxuc3IucmV2ZWFsKCcjcG9ydGZvbGlvIG5hdicsIHtcXHJcXG4gICAgZHVyYXRpb246IDIwMDAsXFxyXFxuICAgIGRlbGF5OjEwMDAsXFxyXFxuICAgIG9yaWdpbjogJ3JpZ2h0JyxcXHJcXG4gICAgdmlld0ZhY3RvcjogMC4yXFxyXFxufSk7XFxyXFxuLyogc3IucmV2ZWFsKCcjY29udGFjdCBoMScsIHtcXHJcXG4gICAgZHVyYXRpb246IDIwMDAsXFxyXFxuICAgIG9yaWdpbjogJ3JpZ2h0JyxcXHJcXG4gICAgdmlld0ZhY3RvcjogMC4yXFxyXFxufSk7XFxyXFxuc3IucmV2ZWFsKCcjY29udGFjdCBoMicsIHtcXHJcXG4gICAgZHVyYXRpb246IDIwMDAsXFxyXFxuICAgIG9yaWdpbjogJ3JpZ2h0JyxcXHJcXG4gICAgdmlld0ZhY3RvcjogMC4yXFxyXFxufSk7XFxyXFxuc3IucmV2ZWFsKCcjY29udGFjdCBhJywge1xcclxcbiAgICBkdXJhdGlvbjogMjAwMCxcXHJcXG4gICAgZGVsYXk6NTAwLFxcclxcbiAgICBvcmlnaW46ICdyaWdodCcsXFxyXFxuICAgIHZpZXdGYWN0b3I6IDAuMlxcclxcbn0pOyAqL1xcclxcbi8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpOXpjbU12YW5NdmJXRnBiaTVxY3k1cWN5SXNJbk52ZFhKalpYTWlPbHNpZDJWaWNHRmphem92THk4dUwzTnlZeTlxY3k5dFlXbHVMbXB6UHpreU9URWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvZ2NtVnhkV2x5WlNnbmJtRjJiV1Z1ZFM1cWN5Y3BPeUFxTDF4eVhHNWNjbHh1THlvZ0xTMHRMUzB0TFMwdExTMVRiVzl2ZEdnZ2MyTnliMnhzSUMwdExTMHRMUzB0TFMwdExTMHFMMXh5WEc0a0tHUnZZM1Z0Wlc1MEtTNXlaV0ZrZVNobWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQXZMeUJCWkdRZ2MyMXZiM1JvSUhOamNtOXNiR2x1WnlCMGJ5QmhiR3dnYkdsdWEzTmNjbHh1SUNBZ0lDUW9YQ0poWENJcExtOXVLQ2RqYkdsamF5Y3NJR1oxYm1OMGFXOXVJQ2hsZG1WdWRDa2dlMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJOWVd0bElITjFjbVVnZEdocGN5NW9ZWE5vSUdoaGN5QmhJSFpoYkhWbElHSmxabTl5WlNCdmRtVnljbWxrYVc1bklHUmxabUYxYkhRZ1ltVm9ZWFpwYjNKY2NseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NW9ZWE5vSUNFOVBTQmNJbHdpS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGQnlaWFpsYm5RZ1pHVm1ZWFZzZENCaGJtTm9iM0lnWTJ4cFkyc2dZbVZvWVhacGIzSmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pYWmxiblF1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGTjBiM0psSUdoaGMyaGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR2hoYzJnZ1BTQjBhR2x6TG1oaGMyZzdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVmMybHVaeUJxVVhWbGNua25jeUJoYm1sdFlYUmxLQ2tnYldWMGFHOWtJSFJ2SUdGa1pDQnpiVzl2ZEdnZ2NHRm5aU0J6WTNKdmJHeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWR2hsSUc5d2RHbHZibUZzSUc1MWJXSmxjaUFvT0RBd0tTQnpjR1ZqYVdacFpYTWdkR2hsSUc1MWJXSmxjaUJ2WmlCdGFXeHNhWE5sWTI5dVpITWdhWFFnZEdGclpYTWdkRzhnYzJOeWIyeHNJSFJ2SUhSb1pTQnpjR1ZqYVdacFpXUWdZWEpsWVZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0Nkb2RHMXNMQ0JpYjJSNUp5a3VZVzVwYldGMFpTaDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTNKdmJHeFViM0E2SUNRb2FHRnphQ2t1YjJabWMyVjBLQ2t1ZEc5d1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwc0lEZ3dNQ3dnWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFRmtaQ0JvWVhOb0lDZ2pLU0IwYnlCVlVrd2dkMmhsYmlCa2IyNWxJSE5qY205c2JHbHVaeUFvWkdWbVlYVnNkQ0JqYkdsamF5QmlaV2hoZG1sdmNpbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRwYm1SdmR5NXNiMk5oZEdsdmJpNW9ZWE5vSUQwZ2FHRnphRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTQXZMeUJGYm1RZ2FXWmNjbHh1SUNBZ0lIMHBPMXh5WEc1OUtUdGNjbHh1WEhKY2JpOHFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxd2NtVnNiMkZrWlhJdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdElDb3ZYSEpjYm5kcGJtUnZkeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RzYjJGa0p5d2dLQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0pDZ25JM04wWVhSMWN5Y3BMbVpoWkdWUGRYUW9LVnh5WEc0Z0lDQWdKQ2duSTJ4dllXUmxjbU52Ym5SaGFXNWxjaWNwTG1aaFpHVlBkWFFvS1R0Y2NseHVJQ0FnSUNRb0p5TndjbVZzYjJGa1pYSW5LUzVrWld4aGVTZ3pNREFwTG1aaFpHVlBkWFFvS1R0Y2NseHVmU2s3WEhKY2JseHlYRzVjY2x4dUx5b3RMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMU0JOWlc1MUlHSjFkSFJ2YmkwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMGdLaTljY2x4dVkyOXVjM1FnYldWdWRVSjBiaUE5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9KeU50Wlc1MVluUnVKeWs3WEhKY2JseHlYRzVqYjI1emRDQnRaVzUxSUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduTG0xbGJuVW5LVHRjY2x4dVkyOXVjM1FnYldWdWRVNWhkaUE5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9KeTV0Wlc1MUxXNWhkaWNwTzF4eVhHNWpiMjV6ZENCdFpXNTFTWFJsYlRFZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdWJXVnVkUzFKZEdWdE1TY3BPMXh5WEc1amIyNXpkQ0J0Wlc1MVNYUmxiVElnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2N1YldWdWRTMUpkR1Z0TWljcE8xeHlYRzVqYjI1emRDQnRaVzUxU1hSbGJUTWdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3ViV1Z1ZFMxSmRHVnRNeWNwTzF4eVhHNWpiMjV6ZENCdFpXNTFTWFJsYlRRZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdWJXVnVkUzFKZEdWdE5DY3BPMXh5WEc0dktpQmpiMjV6ZENCdVlYWkpkR1Z0Y3lBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b0p5NXRaVzUxTFVsMFpXMG5LVHNnS2k5Y2NseHVYSEpjYm14bGRDQnphRzkzVFdWdWRTQTlJR1poYkhObE8xeHlYRzVjY2x4dUpDaHRaVzUxUW5SdUtTNXZiaWduWTJ4cFkyc25MQ0FvS1NBOVBpQjdYSEpjYmlBZ0lDQnBaaUFvSVhOb2IzZE5aVzUxS1NCN1hISmNiaUFnSUNBZ0lDQWdiV1Z1ZFVKMGJpNWpiR0Z6YzB4cGMzUXVZV1JrS0NkamJHOXpaU2NwTzF4eVhHNGdJQ0FnSUNBZ0lHMWxiblV1WTJ4aGMzTk1hWE4wTG1Ga1pDZ25jMmh2ZHljcE8xeHlYRzRnSUNBZ0lDQWdJQzhxSUcxbGJuVkpkR1Z0TG1Oc1lYTnpUR2x6ZEM1aFpHUW9KM05vYjNjbktUc2dLaTljY2x4dUlDQWdJQ0FnSUNBdktpQnVZWFpKZEdWdGN5NWpiR0Z6YzB4cGMzUXVZV1JrS0NkemFHOTNKeWs3SUNvdlhISmNibHh5WEc0Z0lDQWdJQ0FnSUhOb2IzZE5aVzUxSUQwZ2RISjFaVHRjY2x4dUlDQWdJSDBnWld4elpTQnBaaUFvYzJodmQwMWxiblVwSUh0Y2NseHVJQ0FnSUNBZ0lDQnRaVzUxUW5SdUxtTnNZWE56VEdsemRDNXlaVzF2ZG1Vb0oyTnNiM05sSnlrN1hISmNiaUFnSUNBZ0lDQWdiV1Z1ZFM1amJHRnpjMHhwYzNRdWNtVnRiM1psS0NkemFHOTNKeWs3WEhKY2JpQWdJQ0FnSUNBZ0x5b2diV1Z1ZFVsMFpXMHVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTZ25jMmh2ZHljcE95QXFMMXh5WEc0Z0lDQWdJQ0FnSUM4cUlHNWhka2wwWlcxekxtTnNZWE56VEdsemRDNXlaVzF2ZG1Vb0ozTm9iM2NuS1RzZ0tpOWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2MyaHZkMDFsYm5VZ1BTQm1ZV3h6WlR0Y2NseHVJQ0FnSUgxY2NseHVmU2s3WEhKY2JseHlYRzR2S2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRUV1Z1ZFNCSmRHVnRjeUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTb3ZYSEpjYmlRb2JXVnVkVWwwWlcweEtTNXZiaWduWTJ4cFkyc25MQ0FvS1NBOVBpQjdYSEpjYmlBZ0lDQWtLRzFsYm5WSmRHVnRNU2t1WVdSa1EyeGhjM01vSjJGamRHbDJaU2NwTzF4eVhHNGdJQ0FnSkNodFpXNTFTWFJsYlRJcExuSmxiVzkyWlVOc1lYTnpLQ2RoWTNScGRtVW5LVHRjY2x4dUlDQWdJQ1FvYldWdWRVbDBaVzB6S1M1eVpXMXZkbVZEYkdGemN5Z25ZV04wYVhabEp5azdYSEpjYmlBZ0lDQWtLRzFsYm5WSmRHVnROQ2t1Y21WdGIzWmxRMnhoYzNNb0oyRmpkR2wyWlNjcE8xeHlYRzU5S1R0Y2NseHVKQ2h0Wlc1MVNYUmxiVElwTG05dUtDZGpiR2xqYXljc0lDZ3BJRDArSUh0Y2NseHVJQ0FnSUNRb2JXVnVkVWwwWlcweEtTNXlaVzF2ZG1WRGJHRnpjeWduWVdOMGFYWmxKeWs3WEhKY2JpQWdJQ0FrS0cxbGJuVkpkR1Z0TWlrdVlXUmtRMnhoYzNNb0oyRmpkR2wyWlNjcE8xeHlYRzRnSUNBZ0pDaHRaVzUxU1hSbGJUTXBMbkpsYlc5MlpVTnNZWE56S0NkaFkzUnBkbVVuS1R0Y2NseHVJQ0FnSUNRb2JXVnVkVWwwWlcwMEtTNXlaVzF2ZG1WRGJHRnpjeWduWVdOMGFYWmxKeWs3WEhKY2JuMHBPMXh5WEc0a0tHMWxiblZKZEdWdE15a3ViMjRvSjJOc2FXTnJKeXdnS0NrZ1BUNGdlMXh5WEc0Z0lDQWdKQ2h0Wlc1MVNYUmxiVEVwTG5KbGJXOTJaVU5zWVhOektDZGhZM1JwZG1VbktUdGNjbHh1SUNBZ0lDUW9iV1Z1ZFVsMFpXMHlLUzV5WlcxdmRtVkRiR0Z6Y3lnbllXTjBhWFpsSnlrN1hISmNiaUFnSUNBa0tHMWxiblZKZEdWdE15a3VZV1JrUTJ4aGMzTW9KMkZqZEdsMlpTY3BPMXh5WEc0Z0lDQWdKQ2h0Wlc1MVNYUmxiVFFwTG5KbGJXOTJaVU5zWVhOektDZGhZM1JwZG1VbktUdGNjbHh1ZlNrN1hISmNiaVFvYldWdWRVbDBaVzAwS1M1dmJpZ25ZMnhwWTJzbkxDQW9LU0E5UGlCN1hISmNiaUFnSUNBa0tHMWxiblZKZEdWdE1Ta3VjbVZ0YjNabFEyeGhjM01vSjJGamRHbDJaU2NwTzF4eVhHNGdJQ0FnSkNodFpXNTFTWFJsYlRJcExuSmxiVzkyWlVOc1lYTnpLQ2RoWTNScGRtVW5LVHRjY2x4dUlDQWdJQ1FvYldWdWRVbDBaVzB6S1M1eVpXMXZkbVZEYkdGemN5Z25ZV04wYVhabEp5azdYSEpjYmlBZ0lDQWtLRzFsYm5WSmRHVnROQ2t1WVdSa1EyeGhjM01vSjJGamRHbDJaU2NwTzF4eVhHNTlLVHRjY2x4dVhISmNiaThxSUNRb0oyRW5LUzV2YmlnblkyeHBZMnNuTENCbWRXNWpkR2x2YmlobEtYdGNjbHh1SUNBZ0lHVXVjSEpsZG1WdWRFUmxabUYxYkhRb0tWeHlYRzRnSUNBZ1lXeGxjblFvSjJOc2FXc25LVHRjY2x4dWZTa2dLaTljY2x4dVhISmNiaThxSUZOamNtOXNiQ0JTWlhabFlXd2dLaTljY2x4dVhISmNibmRwYm1SdmR5NXpjaUE5SUZOamNtOXNiRkpsZG1WaGJDZ3BPMXh5WEc1emNpNXlaWFpsWVd3b0p5Tm9iMjFsSUdneEp5d2dlMXh5WEc0Z0lDQWdaSFZ5WVhScGIyNDZJREl3TURBc1hISmNiaUFnSUNCdmNtbG5hVzQ2SUNkMGIzQW5YSEpjYm4wcE8xeHlYRzV6Y2k1eVpYWmxZV3dvSnlOb2IyMWxJR2d5Snl3Z2UxeHlYRzRnSUNBZ1pIVnlZWFJwYjI0NklESXdNREFzWEhKY2JpQWdJQ0J2Y21sbmFXNDZJQ2QwYjNBblhISmNibjBwTzF4eVhHNXpjaTV5WlhabFlXd29KeU5vYjIxbElHZ3pKeXdnZTF4eVhHNGdJQ0FnWkhWeVlYUnBiMjQ2SURRd01EQXNYSEpjYmlBZ0lDQnZjbWxuYVc0NklDZHNaV1owSnl4Y2NseHVJQ0FnSUdSbGJHRjVPaUF4TURBd1hISmNibjBwTzF4eVhHNXpjaTV5WlhabFlXd29KeU5vYjIxbElHRW5MQ0I3WEhKY2JpQWdJQ0JrZFhKaGRHbHZiam9nTkRBd01DeGNjbHh1SUNBZ0lHOXlhV2RwYmpvZ0oyeGxablFuTEZ4eVhHNGdJQ0FnWkdWc1lYazZJREUxTURBc1hISmNibjBwTzF4eVhHNXpjaTV5WlhabFlXd29KeU5oWW05MWRDQm9NU2NzSUh0Y2NseHVJQ0FnSUdSMWNtRjBhVzl1T2lBeE1EQXdMRnh5WEc0Z0lDQWdiM0pwWjJsdU9pQW5jbWxuYUhRbkxGeHlYRzRnSUNBZ2RtbGxkMFpoWTNSdmNqb2dNQzR5WEhKY2JuMHBPMXh5WEc1emNpNXlaWFpsWVd3b0p5TmhZbTkxZENCb01pY3NJSHRjY2x4dUlDQWdJR1IxY21GMGFXOXVPaUF5TlRBd0xGeHlYRzRnSUNBZ2IzSnBaMmx1T2lBbmNtbG5hSFFuTEZ4eVhHNGdJQ0FnZG1sbGQwWmhZM1J2Y2pvZ01DNHlYSEpjYm4wcE8xeHlYRzV6Y2k1eVpYWmxZV3dvSnlOaFltOTFkQ0J3Snl3Z2UxeHlYRzRnSUNBZ1pIVnlZWFJwYjI0NklERTFNREFzWEhKY2JpQWdJQ0J2Y21sbmFXNDZJQ2R5YVdkb2RDY3NYSEpjYmlBZ0lDQmtaV3hoZVRvZ05UQXdMRnh5WEc0Z0lDQWdkbWxsZDBaaFkzUnZjam9nTUM0eVhISmNibjBwTzF4eVhHNXpjaTV5WlhabFlXd29KeU5qYjI1MFlXbHVaWEluTENCN1hISmNiaUFnSUNCa2RYSmhkR2x2YmpvZ01UVXdNQ3hjY2x4dUlDQWdJRzl5YVdkcGJqb2dKM0pwWjJoMEp5eGNjbHh1SUNBZ0lHUmxiR0Y1T2lBeE1EQXdMRnh5WEc0Z0lDQWdkbWxsZDBaaFkzUnZjam9nTUM0eVhISmNibjBwTzF4eVhHNXpjaTV5WlhabFlXd29KeU5qYjI1MFlXbHVaWEl5Snl3Z2UxeHlYRzRnSUNBZ1pIVnlZWFJwYjI0NklERTFNREFzWEhKY2JpQWdJQ0J2Y21sbmFXNDZJQ2R5YVdkb2RDY3NYSEpjYmlBZ0lDQmtaV3hoZVRvZ01UQXdNQ3hjY2x4dUlDQWdJSFpwWlhkR1lXTjBiM0k2SURBdU1seHlYRzU5S1R0Y2NseHVjM0l1Y21WMlpXRnNLQ2NqWW1GdWJtVnlJR2d5Snl3Z2UxeHlYRzRnSUNBZ1pIVnlZWFJwYjI0NklESTFNREFzWEhKY2JpQWdJQ0J2Y21sbmFXNDZJQ2R5YVdkb2RDY3NYSEpjYmlBZ0lDQjJhV1YzUm1GamRHOXlPaUF3TGpKY2NseHVmU2s3WEhKY2JuTnlMbkpsZG1WaGJDZ25JM0J2Y25SbWIyeHBieUJvTVNjc0lIdGNjbHh1SUNBZ0lHUjFjbUYwYVc5dU9pQXlNREF3TEZ4eVhHNGdJQ0FnYjNKcFoybHVPaUFuY21sbmFIUW5MRnh5WEc0Z0lDQWdkbWxsZDBaaFkzUnZjam9nTUM0eVhISmNibjBwTzF4eVhHNXpjaTV5WlhabFlXd29KeU53YjNKMFptOXNhVzhnYm1GMkp5d2dlMXh5WEc0Z0lDQWdaSFZ5WVhScGIyNDZJREl3TURBc1hISmNiaUFnSUNCa1pXeGhlVG94TURBd0xGeHlYRzRnSUNBZ2IzSnBaMmx1T2lBbmNtbG5hSFFuTEZ4eVhHNGdJQ0FnZG1sbGQwWmhZM1J2Y2pvZ01DNHlYSEpjYm4wcE8xeHlYRzR2S2lCemNpNXlaWFpsWVd3b0p5TmpiMjUwWVdOMElHZ3hKeXdnZTF4eVhHNGdJQ0FnWkhWeVlYUnBiMjQ2SURJd01EQXNYSEpjYmlBZ0lDQnZjbWxuYVc0NklDZHlhV2RvZENjc1hISmNiaUFnSUNCMmFXVjNSbUZqZEc5eU9pQXdMakpjY2x4dWZTazdYSEpjYm5OeUxuSmxkbVZoYkNnbkkyTnZiblJoWTNRZ2FESW5MQ0I3WEhKY2JpQWdJQ0JrZFhKaGRHbHZiam9nTWpBd01DeGNjbHh1SUNBZ0lHOXlhV2RwYmpvZ0ozSnBaMmgwSnl4Y2NseHVJQ0FnSUhacFpYZEdZV04wYjNJNklEQXVNbHh5WEc1OUtUdGNjbHh1YzNJdWNtVjJaV0ZzS0NjalkyOXVkR0ZqZENCaEp5d2dlMXh5WEc0Z0lDQWdaSFZ5WVhScGIyNDZJREl3TURBc1hISmNiaUFnSUNCa1pXeGhlVG8xTURBc1hISmNiaUFnSUNCdmNtbG5hVzQ2SUNkeWFXZG9kQ2NzWEhKY2JpQWdJQ0IyYVdWM1JtRmpkRzl5T2lBd0xqSmNjbHh1ZlNrN0lDb3ZYSEpjYmlKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3NyYy9qcy9tYWluLmpzXFxuXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMDpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiBtdWx0aSAuL3NyYy9qcy9tYWluLmpzIC4vZGlzdC9idW5kbGUubWluLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgL1VzZXJzL3dheW5lL0Rlc2t0b3AvR2l0SHViL1dheW5lTHVvbmcuZ2l0aHViLmlvL3NyYy9qcy9tYWluLmpzICovXCIuL3NyYy9qcy9tYWluLmpzXCIpO1xuIShmdW5jdGlvbiB3ZWJwYWNrTWlzc2luZ01vZHVsZSgpIHsgdmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJy4vZGlzdC9idW5kbGUubWluLmpzJ1wiKTsgZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnOyB0aHJvdyBlOyB9KCkpO1xuXG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pOyJdLCJzb3VyY2VSb290IjoiIn0=